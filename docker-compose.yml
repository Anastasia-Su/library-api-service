version: "3"
services:
    app:
        build:
            context: .
        ports:
            - "8000:8000"
        volumes:
            - ./:/app
        command: >
            sh -c "python manage.py wait_for_db
            && python manage.py migrate
            && python manage.py runserver 0.0.0.0:8000"
        env_file:
            - .env
        depends_on:
            - db

    redis:
        image: "redis:alpine"

    celery:
        build:
            context: .
            dockerfile: Dockerfile
        command: "celery -A library_api_service worker -l INFO -P solo"
        depends_on:
            - app
            - redis
            - db
        restart: on-failure
        env_file:
            - .env
        environment:
            - broker_connection_retry_on_startup=True

    celery-beat:
        build:
            context: .
            dockerfile: Dockerfile
        command: "celery -A library_api_service beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
        depends_on:
            - app
            - redis
            - db
        restart: on-failure
        env_file:
            - .env

    flower:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "5555:5555"
        command: "celery -A library_api_service flower --address=0.0.0.0"
        depends_on:
            - celery
        env_file:
            - .env

    telegram_bot:
        build:
            context: .
            dockerfile: Dockerfile
        command: "python manage.py start_bot"
        depends_on:
            - app
        env_file:
            - .env

    db:
        image: postgres:14-alpine
        ports:
            - "5433:5432"
        env_file:
            - .env
        volumes:
            - postgres_data:/var/lib/postgresql/data

volumes:
    postgres_data:
        driver: local
